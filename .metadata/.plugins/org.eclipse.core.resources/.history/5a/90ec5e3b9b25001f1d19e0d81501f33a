package com.javatechie.controller;

import java.util.HashSet;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.javatechie.dto.AuthRequest;
import com.javatechie.entity.UserInfo;
import com.javatechie.service.JwtService;
import com.javatechie.service.UserInfoService;

import jakarta.servlet.ServletException;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/auth/*")
public class AuthController {
	
   @Autowired
    private UserInfoService userInfoservice;
	    
    @Autowired
    private JwtService jwtService;

    @Autowired
    private AuthenticationManager authenticationManager;
    
    @Autowired
    private static final Logger myLogger = LoggerFactory.getLogger(AuthController.class);

    
    @GetMapping("/")
    public String welcome() {
        return "Welcome this endpoint is not secure";
    }

    @PostMapping("/new")
    public String addNewUser(@RequestBody UserInfo userInfo) {
        return userInfoservice.addUser(userInfo);
    }
    
	    
    @GetMapping("/api/auth/me")
	public boolean getAuthMe() {
	//public boolean getAuthMe(@Validated User user,  HttpServletRequest request) {
		//myLogger.debug("Auth me return true");
		return true;
	}
     	
    @PostMapping("/login")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) {
        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));
        if (authentication.isAuthenticated()) 
        {
            return jwtService.generateToken(authRequest.getUsername());
        } else {
            throw new UsernameNotFoundException("invalid user request !");
        }
    }
    
	@PostMapping("/api/auth/register")
	public ResponseEntity<?> UserCreation(@RequestBody AuthRequest authRequest) 
	{
		myLogger.info("start register method for: {}",  authRequest.getUsername();
		
		
		if(userInfoservice.findByUsername(authRequest.getUsername())!=null)
		return ResponseEntity
				.badRequest()
				.body(new MessageResponse("Error: Username is already taken"));
		
		if(userInfoservice.findByEmail(authRequest.getUsername())!=null)
		return ResponseEntity
				.badRequest()
				.body(new MessageResponse("Error: Email is already taken"));
		Set<Role> strRoles = user.getRoles();
		Set<Role> roles = new HashSet<>();
			
		UserInfo newUser=new UserInfo();

		
		if (strRoles==null)
		{
			Role userRole = roleRepository.findByName(ERole.ROLE_USER).orElseThrow(()->new RuntimeException("Error:Role is not found"));
			roles.add(userRole);
		}
		else 
		{	
			strRoles.forEach
				(role->
					{switch(role.toString()) 
						{
							case "admin": 	Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN).orElseThrow(()->new RuntimeException("Error:Role is not found"));
											roles.add(adminRole);
											break;
							case "mod" : 	Role modRole = roleRepository.findByName(ERole.ROLE_MODERATOR).orElseThrow(()->new RuntimeException("Error:Role is not found"));
											roles.add(modRole);
											break;
							default		: 	Role userRole = roleRepository.findByName(ERole.ROLE_USER).orElseThrow(()->new RuntimeException("Error:Role is not found"));
											roles.add(userRole);
							break;
						}
			
					}
				);
		}
    

}
